import React from 'react';

export const generateProfessionalReport = (title, data, userName, transactionsFromOCR = []) => {
  let report = "";
  
  if (userName) {
    report += `Hello ${userName}! Here's your Boogasi AI Insights:\n`;
    report += `--------------------------------------------------\n`;
  }

  report += `\n==================================================\n          MAIN_TITLE_MARKER:${title.toUpperCase()}          \n==================================================\n`;
  
  report += `--- SECTION_TITLE_MARKER:General Information ---\n`
  report += `Generated by: Boogasi AI\n`;
  report += `Date: ${new Date().toLocaleDateString()}\n`;
  report += `Time: ${new Date().toLocaleTimeString()}\n`;
  if (data.detectedDocumentType) {
    report += `Detected Document Type: ${data.detectedDocumentType}\n`;
  }
  report += `--------------------------------------------------\n`;

  if (transactionsFromOCR && transactionsFromOCR.length > 0) {
    report += "\n--- SECTION_TITLE_MARKER:Transaction Details (Boogasi AI) ---\n"; 
    report += "Source: Document Upload & OCR Processing (Boogasi AI)\n";
    report += "Accuracy: Best effort based on document quality. Review recommended.\n";
    report += "Note: Balances are calculated based on listed transactions. Starting balance assumed 0 if not specified in document.\n\n";
    
    report += `Date        | Description                         | Amount      | Currency | Running Balance\n`;
    report += `------------|-------------------------------------|-------------|----------|----------------\n`;

    let runningBalance = 0;
    transactionsFromOCR.forEach(tx => {
      const dateStr = (tx.date || 'N/A').padEnd(10);
      const descStr = (tx.description || 'N/A').substring(0, 35).padEnd(35);
      const amountStr = (typeof tx.amount === 'number' ? tx.amount.toFixed(2) : String(tx.amount || 'N/A')).padStart(11);
      const currencyStr = (tx.currency || 'USD').padEnd(8);
      
      if (typeof tx.amount === 'number') {
        runningBalance += tx.amount;
      }
      const balanceStr = runningBalance.toFixed(2).padStart(14);

      report += `${dateStr} | ${descStr} | ${amountStr} | ${currencyStr} | ${balanceStr}\n`;
    });

    report += `------------|-------------------------------------|-------------|----------|----------------\n`;

    const totalDeposits = transactionsFromOCR.filter(tx => typeof tx.amount === 'number' && tx.amount > 0).reduce((sum, tx) => sum + tx.amount, 0);
    const totalWithdrawals = transactionsFromOCR.filter(tx => typeof tx.amount === 'number' && tx.amount < 0).reduce((sum, tx) => sum + tx.amount, 0);
    
    report += `Total Deposits:    +${totalDeposits.toFixed(2)} ${(transactionsFromOCR[0]?.currency || 'USD')}\n`;
    report += `Total Withdrawals: ${totalWithdrawals.toFixed(2)} ${(transactionsFromOCR[0]?.currency || 'USD')}\n`;
    report += `Final Balance:     ${runningBalance.toFixed(2)} ${(transactionsFromOCR[0]?.currency || 'USD')}\n`;
    report += `(Based on processed transactions. Initial balance assumed as 0.)\n`;
    report += `--------------------------------------------------\n`;
  }


  for (const [key, value] of Object.entries(data)) {
    if (key === 'detectedDocumentType') continue; // Already handled above
    const formattedKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
    
    if (key === 'suggestions' || key === 'analysisFocus' || key === 'outlook' || key === 'manualDataAcknowledgement' || key === 'actionableInsights' || key === 'actionableRecommendations') {
      report += `\n--- SECTION_TITLE_MARKER:${formattedKey} ---\n${value}\n`;
    } else if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
      report += `\n--- SECTION_TITLE_MARKER:${formattedKey} ---\n`;
      for (const [subKey, subValue] of Object.entries(value)) {
        report += `  - ${subKey.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}: ${subValue}\n`;
      }
    } else if (Array.isArray(value)) {
        report += `\n--- SECTION_TITLE_MARKER:${formattedKey} ---\n`;
        value.forEach(item => report += `  - ${item}\n`);
    } else {
      report += `${formattedKey}: ${value}\n`;
    }
  }
  if (data.suggestions && (!transactionsFromOCR || transactionsFromOCR.length === 0)) { 
    report += `--------------------------------------------------\n`;
    report += `--- SECTION_TITLE_MARKER:Suggestions & Remarks (Boogasi AI) ---\n${data.suggestions}\n`;
  }
  report += `==================================================\n`;
  return report;
};